
1
00:00:01,680 --> 00:00:06,200
Speaker 1: In this lesson, we'll refine our National Parks voting app by integrating our complete dataset. 

2
00:00:06,600 --> 00:00:10,440
Speaker 1: We'll also add final features with agent and assistant to ensure everything works correct. 

3
00:00:10,550 --> 00:00:10,580
Speaker 1: Play. 

4
00:00:11,330 --> 00:00:13,730
Speaker 1: Then we'll deploy the application for public use. 

5
00:00:14,170 --> 00:00:17,970
Speaker 1: In the last lesson, we built out our park ranking head voting app. 

6
00:00:17,970 --> 00:00:22,390
Speaker 1: Here we got all the functionality implemented and we have our parts being stored in a database. 

7
00:00:22,390 --> 00:00:27,230
Speaker 1: We kind of got this nice little ranking table here along with our recent votes that are being stored in Postgres.

8
00:00:27,560 --> 00:00:29,480
Speaker 1: Now we're gonna add some additional functionality. 

9
00:00:29,600 --> 00:00:34,870
Speaker 1: We're going to understand how this works and then deploy our app. 

10
00:00:34,910 --> 00:00:38,210
Speaker 1: But on that last agent running another lie, I kind of zoned out. 

11
00:00:38,290 --> 00:00:42,110
Speaker 1: And so I kind of missed, I miss exactly how things are being implemented. 

12
00:00:42,110 --> 00:00:47,810
Speaker 1: So what I'm gonna do now is I'm gonna head to assistant and I'm just gonna ask it to help me understand how my projects working.

13
00:00:47,890 --> 00:00:51,810
Speaker 1: Again, you're gonna see the preview refresh as we switch to assistant mode. 

14
00:00:52,210 --> 00:00:59,060
Speaker 1: But I see client, I see server and shared, but like, I don't know much about databases or how we implemented our database. 

15
00:00:59,060 --> 00:01:16,680
Speaker 1: So I'm just gonna ask assistant, help me understand what frameworks we used for our database, how does it work and how are we managing it.

16
00:01:19,760 --> 00:01:24,800
Speaker 1: Ends again, I think frameworks are important, something I've been emphasizing throughout this course. 

17
00:01:24,840 --> 00:01:36,310
Speaker 1: And understanding what we're building is important because as we get into these debugging issues, you need to understand how to solve these problems and how things work in order to solve those problems. 

18
00:01:36,310 --> 00:01:40,270
Speaker 1: So assistant basically just gave me a recap of everything agent just built.

19
00:01:40,350 --> 00:01:46,630
Speaker 1: We're using Postgres, which is the main database configured through a connection URL in our environment variables, which we talked about. 

20
00:01:46,670 --> 00:01:46,990
Speaker 1: Cool. 

21
00:01:47,190 --> 00:01:52,380
Speaker 1: We're using an Orm framework called Drizzle Orm, which is a typescript first Orm. 

22
00:01:52,460 --> 00:01:53,420
Speaker 1: I have no idea what that means. 

23
00:01:53,420 --> 00:01:54,660
Speaker 1: We're gonna dig into that in a second. 

24
00:01:55,380 --> 00:01:57,020
Speaker 1: We're also doing some schema management. 

25
00:01:57,020 --> 00:01:58,180
Speaker 1: So we're defining that. 

26
00:01:58,220 --> 00:01:59,180
Speaker 1: I can actually look through here.

27
00:01:59,180 --> 00:02:00,380
Speaker 1: Shared schema. 

28
00:02:01,240 --> 00:02:01,960
Speaker 1: Okay, cool. 

29
00:02:02,000 --> 00:02:07,960
Speaker 1: Like this is defining the parks table and all of the columns there is defining a votes table. 

30
00:02:08,160 --> 00:02:12,000
Speaker 1: Need actually walking through our tables. 

31
00:02:12,440 --> 00:02:16,520
Speaker 1: And the code base has two storage implementations and in memory implementation. 

32
00:02:16,520 --> 00:02:19,400
Speaker 1: So this was like our old dev implementation. 

33
00:02:19,400 --> 00:02:20,920
Speaker 1: We could clean that up if we wanted to. 

34
00:02:21,040 --> 00:02:24,420
Speaker 1: So could call out and it explains how these things work. 

35
00:02:24,460 --> 00:02:25,300
Speaker 1: Now, what was that? 

36
00:02:25,300 --> 00:02:26,380
Speaker 1: Did just walk this through?

37
00:02:26,900 --> 00:02:29,530
Speaker 1: I don't really know what an or for m framework is. 

38
00:02:29,530 --> 00:02:38,830
Speaker 1: So I'm gonna say what is an Orm framework and why would I use drizzle or? 

39
00:02:40,430 --> 00:02:52,140
Speaker 1: This is exactly how I've you Learned to code, how to build with AI and basically everything that I'm showing you today, I just ask a bunch of questions and, you know, assistant uses the latest models. 

40
00:02:52,360 --> 00:02:56,160
Speaker 1: We're just asking questions and understanding kind of what's going on. 

41
00:02:56,600 --> 00:03:09,640
Speaker 1: So assistance gonna actually tell us here exactly what our RM, who RRM is, object relational mapping is a framework that lets you interact with your database using programming languages, objects, instead of writing raw SQL queries. 

42
00:03:10,000 --> 00:03:15,840
Speaker 1: Okay, so we're using objects instead of writing SQL, which is a language for interacting with databases. 

43
00:03:16,630 --> 00:03:19,380
Speaker 1: So it's actually telling us some of the benefits types. 

44
00:03:19,500 --> 00:03:22,580
Speaker 1: If the schema management query, building scheme validation.

45
00:03:22,740 --> 00:03:25,900
Speaker 1: Okay, maybe I don't know exactly what these things are, but I could keep digging into them. 

46
00:03:26,380 --> 00:03:31,210
Speaker 1: So really the goal here is just to help you understand, hey, I don't actually know what this thing is. 

47
00:03:31,250 --> 00:03:40,320
Speaker 1: I don't really know what's going on, but I can learn and I can ask AI and I can use that as a way to kind of reinforce the things that I'm building and to keep iterating. 

48
00:03:40,480 --> 00:03:51,180
Speaker 1: So just like that, assistant helped us understand how our application worked and maybe even learn a few things about drizzle, about Postgres and some of the tools that we're building with.

49
00:03:51,290 --> 00:03:53,080
Speaker 1: But I've been really impressed. 

50
00:03:53,120 --> 00:03:54,000
Speaker 1: I like how this works. 

51
00:03:54,000 --> 00:03:56,980
Speaker 1: We have an application where we can vote for parks. 

52
00:03:56,980 --> 00:04:01,470
Speaker 1: The parks are recorded in our database and we get our ranking system. 

53
00:04:02,560 --> 00:04:04,360
Speaker 1: This is exactly what I wanted and it's really cool. 

54
00:04:04,360 --> 00:04:05,320
Speaker 1: It's really interactive. 

55
00:04:05,320 --> 00:04:08,440
Speaker 1: We actually pulled the data and these images from Wikipedia. 

56
00:04:08,870 --> 00:04:15,560
Speaker 1: So pretty complicated app here of some data manipulation, visualization, how to extract, transform, load type stuff. 

57
00:04:15,880 --> 00:04:20,740
Speaker 1: So now we're gonna go ahead, we're gonna deploy this just like last time, Renee's auto scale, we're and approve those settings. 

58
00:04:21,100 --> 00:04:24,740
Speaker 1: And this time you'll notice that we have secrets for our database, right? 

59
00:04:24,740 --> 00:04:29,790
Speaker 1: So if we're gonna deploy with APIs or external services, we pull those secrets through as well. 

60
00:04:30,190 --> 00:04:33,090
Speaker 1: We'll call this one park challenge. 

61
00:04:33,330 --> 00:04:35,810
Speaker 1: Think that's available ends. 

62
00:04:35,810 --> 00:04:37,890
Speaker 1: We're gonna go down, we're gonna pull it. 

63
00:04:39,180 --> 00:04:48,940
Speaker 1: And just like last time, rebel it is going to build this deployment, it's gonna configure everything and promote that to our production environment.

64
00:04:49,180 --> 00:04:52,800
Speaker 1: There's really not much we need to worry about since we built the entire thing out. 

65
00:04:54,140 --> 00:04:59,900
Speaker 1: And typically in development, it's really hard not only to recreate your environment in the cloud, but then to add. 

66
00:05:00,000 --> 00:05:04,390
Speaker 1: In those external services to add in databases and manage those databases in a separate environment. 

67
00:05:05,020 --> 00:05:06,340
Speaker 1: And we do a bunch of other stuff, right? 

68
00:05:06,380 --> 00:05:10,620
Speaker 1: And so what we have here is a database that's directly integrated into the environment. 

69
00:05:10,870 --> 00:05:14,340
Speaker 1: As we talked about before, our app kind of installed a bunch of stuff for us. 

70
00:05:14,340 --> 00:05:16,300
Speaker 1: It ran some Python scripts to import data. 

71
00:05:16,980 --> 00:05:20,580
Speaker 1: You know, agent configured this database that embedded into our application. 

72
00:05:20,980 --> 00:05:22,380
Speaker 1: And we didn't have to go anywhere. 

73
00:05:22,460 --> 00:05:26,860
Speaker 1: We didn't have to go to another tab, we didn't have to set up another account or inn API key. 

74
00:05:27,180 --> 00:05:28,500
Speaker 1: We just did it all from right and reply. 

75
00:05:28,780 --> 00:05:42,880
Speaker 1: And so the power of building with agent, the power of building with assistant is that we're able to make these applications, these full stack applications that have databases, that have front ends and they have backends and really build complex tooling from one pain. 

76
00:05:43,360 --> 00:05:44,840
Speaker 1: That is vibe coding, right? 

77
00:05:44,960 --> 00:05:48,280
Speaker 1: We did a lot of planning, we did a lot of discussion about tools and frameworks. 

78
00:05:48,280 --> 00:05:54,130
Speaker 1: But for the most part, this looks a lot different from coding or building. 

79
00:05:54,290 --> 00:05:55,650
Speaker 1: Otherwise, there's a lot of bugs. 

80
00:05:55,930 --> 00:06:00,240
Speaker 1: We're just kind of going by feel with the debugging and we're going by feel with like how we manage context. 

81
00:06:00,240 --> 00:06:02,200
Speaker 1: So I'm gonna let this deployment wrap up. 

82
00:06:02,200 --> 00:06:08,050
Speaker 1: We'll come back, we'll finish it up, make sure our application works, and we'll move on from there.

83
00:06:11,880 --> 00:06:12,280
Speaker 1: Cool. 

84
00:06:12,800 --> 00:06:14,560
Speaker 1: So we deployed our application. 

85
00:06:14,800 --> 00:06:18,000
Speaker 1: We get a URL and it's deployed as an auto scale deployment. 

86
00:06:18,000 --> 00:06:21,600
Speaker 1: Again, if you want to learn more about that, you can check out our videos or the documentation. 

87
00:06:22,560 --> 00:06:25,360
Speaker 1: Opening the app, we get exactly what we had before. 

88
00:06:25,480 --> 00:06:26,800
Speaker 1: I can vote on Mammoth Cave. 

89
00:06:26,800 --> 00:06:32,680
Speaker 1: And actually, it's important to note that the same scores pulled through from before, that's because we're using the same database. 

90
00:06:32,760 --> 00:06:39,080
Speaker 1: So we have our voting system, we have some recent votes, and we have our rankings that are being stored persistently in our database. 

91
00:06:39,630 --> 00:06:41,830
Speaker 1: As I kind of talked about, this is the power of ruplet. 

92
00:06:41,910 --> 00:06:44,790
Speaker 1: We just deployed this live on the internet for anybody to access. 

93
00:06:44,870 --> 00:06:47,110
Speaker 1: If you want to share with your family or friends, you could do just that. 

94
00:06:48,530 --> 00:06:54,050
Speaker 1: And yeah, you know, end to end, full stack application, persistent storage, vibe coded all the way. 

95
00:06:54,170 --> 00:06:57,730
Speaker 1: So in our next lesson, we're gonna talk about next steps, we're gonna talk about where to go from here. 

96
00:06:57,730 --> 00:06:58,930
Speaker 1: But thanks for joining along. 

97
00:06:58,970 --> 00:07:02,870
Speaker 1: Thanks for building some cool apps. Let's wrap it up.
